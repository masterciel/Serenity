#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Serenity.CodeGenerator.Views
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class EntityScriptRow : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden
 public dynamic Model { get; set; } 
        public override void Execute()
        {


WriteLiteral("\r\n");



                                                   
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");
    var schemaDot = Model.Schema == null ? "" : ("[" + Model.Schema + "].");
     
    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };

    Func<EntityCodeField, string> gt = (x) =>
    {
        return (x.Type == "Stream" ? "byte[]" : (x.Type == "DateTime" ? "String" : (x.Type + (x.IsValueType ? "?" : ""))));
    };


WriteLiteral("namespace ");


      Write(Model.RootNamespace);


                            Write(dotModule);

WriteLiteral(@"
{
    using Serenity;
    using Serenity.ComponentModel;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    [Imported, Serializable, PreserveMemberCase]
    public partial class ");


                    Write(Model.RowClassName);


                                            WriteLiteral("\r\n    {");

      if (Model.Identity != null) {
WriteLiteral("\r\n        [InlineConstant] public const string IdProperty = \"");


                                                       Write(Model.Identity);

WriteLiteral("\";");


                                                                                     }

                                                                                       if (Model.NameField != null) {
WriteLiteral("\r\n        [InlineConstant] public const string NameProperty = \"");


                                                         Write(Model.NameField);

WriteLiteral("\";");


                                                                                        }

WriteLiteral("\r\n        [InlineConstant] public const string LocalTextPrefix = \"");


                                                           Write(moduleDot);


                                                                     Write(Model.ClassName);

WriteLiteral("\";\r\n");


 foreach (var x in Model.Fields) {

WriteLiteral("\r\n        public ");


          Write(gt(x));

WriteLiteral(" ");


                 Write(x.Ident);

WriteLiteral(" { get; set; }");


                                                   }


 foreach (var x in Model.Joins){foreach (var y in x.Fields){

WriteLiteral("\r\n        public ");


          Write(gt(y));

WriteLiteral(" ");


                  Write(jf(x.Name, y.Ident));

WriteLiteral(" { get; set; }");


                                                                 }}


WriteLiteral("\r\n\r\n        [Imported, PreserveMemberCase]\r\n        public static class Fields\r\n " +
"       {");

          foreach (var x in Model.Fields) {

WriteLiteral("\r\n            [InlineConstant] public const string ");


                                            Write(x.Ident);

WriteLiteral(" = \"");


                                                         Write(x.Ident);

WriteLiteral("\";");


                                                                                }


 foreach (var x in Model.Joins){foreach (var y in x.Fields){

WriteLiteral("\r\n            [InlineConstant] public const string ");


                                             Write(jf(x.Name, y.Ident));

WriteLiteral(" = \"");


                                                                       Write(jf(x.Name, y.Ident));

WriteLiteral("\";");


                                                                                                          }}

WriteLiteral("\r\n        }\r\n    }\r\n}");


        }
    }
}
#pragma warning restore 1591
