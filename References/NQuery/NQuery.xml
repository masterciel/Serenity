<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NQuery</name>
    </assembly>
    <members>
        <member name="T:NQuery.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NQuery.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateCannotContainAggregate">
            <summary>
              Looks up a localized string similar to Cannot perform aggregate function &apos;{1}&apos; on an expression containing an aggregate (&apos;{2}&apos;): {0}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateCannotContainSubquery">
            <summary>
              Looks up a localized string similar to Cannot perform aggregate function on an expression containing a subquery: {0}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateContainsColumnsFromDifferentQueries">
            <summary>
              Looks up a localized string similar to Multiple columns are specified in aggregated expression &apos;{0}&apos; containing an outer reference. If an expression being aggregated contains an outer reference, then that outer reference must be the only column referenced in the expression..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateDoesNotSupportType">
            <summary>
              Looks up a localized string similar to The aggregate operation &apos;{0}&apos; cannot take a &apos;{1}&apos; data type as an argument..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateInGroupBy">
            <summary>
              Looks up a localized string similar to Cannot use an aggregate or a subquery in an expression used for the group by list of a GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateInOn">
            <summary>
              Looks up a localized string similar to An aggregate cannot appear in an ON clause unless it is in a subquery contained in a HAVING clause or select list, and the column being aggregated is an outer reference..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateInvalidInCurrentContext">
            <summary>
              Looks up a localized string similar to Aggregation expression &apos;{0}&apos; not valid in this context..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AggregateInWhere">
            <summary>
              Looks up a localized string similar to An aggregate may not appear in the WHERE clause unless it is in a subquery contained in a HAVING clause or a select list, and the column being aggregated is an outer reference..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AllColumnsMustBelongToSameTable">
            <summary>
              Looks up a localized string similar to All columns in &apos;{0}&apos; must belong to the same table..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousAggregate">
            <summary>
              Looks up a localized string similar to Aggregate name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousBinaryOperator">
            <summary>
              Looks up a localized string similar to Binary operator &apos;{0}&apos; invocation on types &apos;{1}&apos; and &apos;{2}&apos; is ambiguous between method &apos;{3}&apos; and &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousCastingOperator">
            <summary>
              Looks up a localized string similar to {0} operator is ambiguous between &apos;{1}&apos; and &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousColumnRef">
            <summary>
              Looks up a localized string similar to Column ref name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousConstant">
            <summary>
              Looks up a localized string similar to Constant name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousInvocation">
            <summary>
              Looks up a localized string similar to Invocation with argument types &apos;{2}&apos; is ambiguous between &apos;{0}&apos; and &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousInvocationNoArgs">
            <summary>
              Looks up a localized string similar to Invocation is ambiguous between &apos;{0}&apos; and &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousOperatorOverloading">
            <summary>
              Looks up a localized string similar to The call to user defined operator &apos;{0}&apos; on types &apos;{1}&apos; and &apos;{2}&apos; is ambiguous..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousParameter">
            <summary>
              Looks up a localized string similar to Parameter name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousProperty">
            <summary>
              Looks up a localized string similar to Property name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousReference">
            <summary>
              Looks up a localized string similar to Identifier &apos;{0}&apos; is ambiguous between &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousTable">
            <summary>
              Looks up a localized string similar to Table name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousTableRef">
            <summary>
              Looks up a localized string similar to Table ref name {0} is ambiguous between {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousType">
            <summary>
              Looks up a localized string similar to Type reference &apos;{0}&apos; is ambiguous between 1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AmbiguousUnaryOp">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0}&apos; invocation on type &apos;{1}&apos; is ambiguous between method &apos;{2}&apos; and &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ArgMustBeOfType">
            <summary>
              Looks up a localized string similar to Argument must be of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ArgumentArrayMustHaveSameSize">
            <summary>
              Looks up a localized string similar to Array argument &apos;{0}&apos; must have same size as &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ArgumentArrayMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to Array must not be empty..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ArgumentOutOfRange">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; is out-of-range ({2}-{3}), actual value was {1}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.AsteriskModifierNotAllowed">
            <summary>
              Looks up a localized string similar to Aggregation modifier &apos;*&apos; not allowed in function call &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.BinaryOperatorFailed">
            <summary>
              Looks up a localized string similar to Binary operator &apos;{0} {1} {2}&apos; threw an exception: {6}{7}Operator method: &apos;{3}&apos;. Arguments: &apos;{4}&apos;, &apos;{5}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.BindingWithSameNameAlreadyInCollection">
            <summary>
              Looks up a localized string similar to A binding with the same name &apos;{0}&apos; already exists in this collection..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CannotApplyBinaryOp">
            <summary>
              Looks up a localized string similar to Cannot apply binary operator &apos;{0}&apos; on types &apos;{1}&apos; and &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CannotApplyUnaryOp">
            <summary>
              Looks up a localized string similar to Cannot apply unary operator &apos;{0}&apos; on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CannotCast">
            <summary>
              Looks up a localized string similar to Cannot cast &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CannotFoldConstants">
            <summary>
              Looks up a localized string similar to Cannot evaluate constant expression: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.CannotLoadTypeAssembly">
            <summary>
              Looks up a localized string similar to Could not load assembly &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.CastingOperatorFailed">
            <summary>
              Looks up a localized string similar to Casting operator threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ChildColumnNotFound">
            <summary>
              Looks up a localized string similar to Child column &apos;{0}&apos; in table &apos;{1}&apos; not found..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ChildColumnsMustNotContainColumnsOfOtherTables">
            <summary>
              Looks up a localized string similar to childColumns must not contain columns of different tables..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ChildTableMustExistInDataContext">
            <summary>
              Looks up a localized string similar to Child table must exist in data context..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CodeAssistanceFailed">
            <summary>
              Looks up a localized string similar to Cannot provide code assistance: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ColumnBindingGetValueFailed">
            <summary>
              Looks up a localized string similar to ColumnBinding.GetValue() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ConstantBindingGetValueFailed">
            <summary>
              Looks up a localized string similar to ConstantBinding.GetValue() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ConstantExpressionInOrderBy">
            <summary>
              Looks up a localized string similar to A constant expression was encountered in the ORDER BY list..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ConversionFailed">
            <summary>
              Looks up a localized string similar to Conversion of {0} to {1} failed: {2}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsDistinct">
            <summary>
              Looks up a localized string similar to DISTINCT operator is not allowed in the recursive part of a recursive common table expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsGroupByHavingOrAggregate">
            <summary>
              Looks up a localized string similar to GROUP BY, HAVING, or aggregate functions are not allowed in the recursive part of a recursive common table expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsMultipleRecursiveReferences">
            <summary>
              Looks up a localized string similar to Recursive member of a common table expression &apos;{0}&apos; has multiple recursive references..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsOuterJoin">
            <summary>
              Looks up a localized string similar to Outer join is not allowed in the recursive part of a recursive common table expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsRecursiveReferenceInSubquery">
            <summary>
              Looks up a localized string similar to Recursive references are not allowed in subqueries.
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsTop">
            <summary>
              Looks up a localized string similar to TOP operator is not allowed in the recursive part of a recursive common table expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsUnexpectedAnchorMember">
            <summary>
              Looks up a localized string similar to An anchor member was found in the recursive part of recursive query &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteContainsUnion">
            <summary>
              Looks up a localized string similar to UNION operator is not allowed in the recursive part of a recursive common table expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteDoesNotHaveAnchorMember">
            <summary>
              Looks up a localized string similar to No anchor member was specified for recursive query &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteDoesNotHaveUnionAll">
            <summary>
              Looks up a localized string similar to Recursive common table expression &apos;{0}&apos; does not contain a top-level UNION ALL operator..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteHasDuplicateColumnName">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; was specified multiple times for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteHasDuplicateTableName">
            <summary>
              Looks up a localized string similar to Duplicate common table expression name &apos;{0}&apos; was specified..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteHasFewerColumnsThanSpecified">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has fewer columns than were specified in the column list..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteHasMoreColumnsThanSpecified">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has more columns than were specified in the column list..
            </summary>
        </member>
        <member name="P:NQuery.Resources.CteHasTypeMismatchBetweenAnchorAndRecursivePart">
            <summary>
              Looks up a localized string similar to Types don&apos;t match between the anchor and the recursive part in column &apos;{0}&apos; of recursive query &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DifferentExpressionCountInBinaryQuery">
            <summary>
              Looks up a localized string similar to All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DuplicateAggregate">
            <summary>
              Looks up a localized string similar to Aggregate function named &apos;{0}&apos; already in list..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DuplicateFunction">
            <summary>
              Looks up a localized string similar to Function {0} already declared..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DuplicatePropertyReference">
            <summary>
              Looks up a localized string similar to The property collection already contains a property named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DuplicateRelationDataGatherer">
            <summary>
              Looks up a localized string similar to For the relation {0} is already a data gatherer registered..
            </summary>
        </member>
        <member name="P:NQuery.Resources.DuplicateTableRefInFrom">
            <summary>
              Looks up a localized string similar to The correlation name &apos;{0}&apos; is specified multiple times in a FROM clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ExpressionCompilationFailed">
            <summary>
              Looks up a localized string similar to Expression could not be compiled.{0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionBindingInvokeFailed">
            <summary>
              Looks up a localized string similar to FunctionBinding.Invoke() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionMustNotBeVoid">
            <summary>
              Looks up a localized string similar to Function must return a value..
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionMustNotHaveArrayParams">
            <summary>
              Looks up a localized string similar to Functions with array parameters are not supported..
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionMustNotHaveOptionalParams">
            <summary>
              Looks up a localized string similar to Functions with optional parameters are not supported..
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionMustNotHaveRefOrOutParams">
            <summary>
              Looks up a localized string similar to Functions with out or ref parameters are not supported..
            </summary>
        </member>
        <member name="P:NQuery.Resources.FunctionWithSameNameAndSignatureAlreadyInCollection">
            <summary>
              Looks up a localized string similar to A function with the same name and signature already exists: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.GroupByItemDoesNotReferenceAnyColumns">
            <summary>
              Looks up a localized string similar to Each GROUP BY expression must contain at least one column that is not an outer reference..
            </summary>
        </member>
        <member name="P:NQuery.Resources.HavingClauseMustEvaluateToBool">
            <summary>
              Looks up a localized string similar to HAVING clause must evaluate to BOOLEAN expression..
            </summary>
        </member>
        <member name="P:NQuery.Resources.HavingExpressionNotAggregatedOrGrouped">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IAggregatorAccumulateFailed">
            <summary>
              Looks up a localized string similar to IAggregator.Accumulate() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IAggregatorInitFailed">
            <summary>
              Looks up a localized string similar to IAggregator.Init() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IAggregatorTerminateFailed">
            <summary>
              Looks up a localized string similar to IAggregator.Terminate() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IllegalInputCharacter">
            <summary>
              Looks up a localized string similar to Invalid character in input &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IMethodProviderGetMethodsFailed">
            <summary>
              Looks up a localized string similar to IMethodProvider.GetMethods() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InternalError">
            <summary>
              Looks up a localized string similar to Internal Error: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.InternalErrorGetValueNotSupported">
            <summary>
              Looks up a localized string similar to {0}.GetValue() not supported..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidAttemptToRead">
            <summary>
              Looks up a localized string similar to Invalid attempt to read when no data is present..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidBinary">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid binary number..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidBinaryOperator">
            <summary>
              Looks up a localized string similar to Invalid binary operator: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDataTypeInGroupBy">
            <summary>
              Looks up a localized string similar to The data type &apos;{0}&apos; cannot be used in GROUP BY since it cannot be compared or sorted..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDataTypeInOrderBy">
            <summary>
              Looks up a localized string similar to The data type &apos;{0}&apos; cannot be used in ORDER BY since it cannot be compared or sorted..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDataTypeInSelectDistinct">
            <summary>
              Looks up a localized string similar to The data type &apos;{0}&apos; cannot be used in SELECT DISTINCT since it cannot be compared or sorted..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDataTypeInUnion">
            <summary>
              Looks up a localized string similar to The data type &apos;{0}&apos; cannot be used in {1} since it cannot be compared or sorted..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDate">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid date..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidDecimal">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid decimal number..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidHex">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid hex number..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidIdentifier">
            <summary>
              Looks up a localized string similar to The text &apos;{0}&apos; is not a valid identifier.
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidInteger">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid integer..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidOctal">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid octal number..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidOperatorForAllAny">
            <summary>
              Looks up a localized string similar to SOME, ANY and ALL can only be applied on =, &lt;&gt;, &lt;, &lt;=, &gt;, or &gt;=.
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidRowReference">
            <summary>
              Looks up a localized string similar to Row reference &apos;{0}&apos; is not valid since the table it is referring to is either a derived table or a common table expression (CTE)..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidTypeReference">
            <summary>
              Looks up a localized string similar to Type reference {0} is malformed. Neither quoted nor parenthesized identifiers can be used in type references. Use string literals to express case sensitivity..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvalidUnaryOperator">
            <summary>
              Looks up a localized string similar to operator: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.InvocationRequiresParentheses">
            <summary>
              Looks up a localized string similar to Invocation of &apos;{0}&apos; requires parentheses..
            </summary>
        </member>
        <member name="P:NQuery.Resources.IPropertyProviderGetPropertiesFailed">
            <summary>
              Looks up a localized string similar to IPropertyProvider.GetProperties() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.MaximumRecursionLevelExceeded">
            <summary>
              Looks up a localized string similar to The maximum recursion 100 has been exhausted before statement completion..
            </summary>
        </member>
        <member name="P:NQuery.Resources.MethodBindingInvokeFailed">
            <summary>
              Looks up a localized string similar to MethodBinding.Invoke() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.MissingPropertyProvider">
            <summary>
              Looks up a localized string similar to Cannot add properties -- no property provider is registered for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.MissingTableProvider">
            <summary>
              Looks up a localized string similar to Cannot add table -- no table provider is registered for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.MustSpecifyTableToSelectFrom">
            <summary>
              Looks up a localized string similar to Must specify table to select from..
            </summary>
        </member>
        <member name="P:NQuery.Resources.NoColumnAliasSpecified">
            <summary>
              Looks up a localized string similar to No column name was specified for column {0} of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.NoPropertyProviderRegisteredAndDefaultProviderIsMissing">
            <summary>
              Looks up a localized string similar to No property provider is registered for type &apos;{0}&apos; and there is no default property provider..
            </summary>
        </member>
        <member name="P:NQuery.Resources.NumberTooLarge">
            <summary>
              Looks up a localized string similar to The number &apos;{0}&apos; is too large..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByColumnPositionIsOutOfRange">
            <summary>
              Looks up a localized string similar to The ORDER BY position number {0} is out of range of the number of items in the select list..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByExpressionNotAggregatedAndNoGroupBy">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is invalid in the ORDER BY clause because it is not contained in an aggregate function and there is no GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByExpressionNotAggregatedOrGrouped">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByInvalidInSubqueryUnlessTopIsAlsoSpecified">
            <summary>
              Looks up a localized string similar to The ORDER BY clause is invalid in derived tables, subqueries, and common table expressions, unless TOP is also specified..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByItemsMustBeInSelectListIfDistinctSpecified">
            <summary>
              Looks up a localized string similar to ORDER BY items must appear in the select list if SELECT DISTINCT is specified..
            </summary>
        </member>
        <member name="P:NQuery.Resources.OrderByItemsMustBeInSelectListIfUnionSpecified">
            <summary>
              Looks up a localized string similar to ORDER BY items must appear in the select list if the statement contains a UNION, INTERSECT or EXCEPT operator..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParameterBindingGetValueFailed">
            <summary>
              Looks up a localized string similar to ParameterBinding.Value threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParameterValueTypeMismatch">
            <summary>
              Looks up a localized string similar to The parameter type is not assignable from the given value..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParentColumnNotFound">
            <summary>
              Looks up a localized string similar to Parent column &apos;{0}&apos; in table &apos;{1}&apos; not found..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParentColumnsMustContainAtLeastOneColumn">
            <summary>
              Looks up a localized string similar to parentColumns must contain at least one column..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParentColumnsMustHaveSameSizeAsChildColumns">
            <summary>
              Looks up a localized string similar to childColumns.Length must match parentColumns.Length..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParentColumnsMustNotContainColumnsOfOtherTables">
            <summary>
              Looks up a localized string similar to parentColumns must not contain columns of different tables..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ParentTableMustExistInDataContext">
            <summary>
              Looks up a localized string similar to Parent table must exist in data context..
            </summary>
        </member>
        <member name="P:NQuery.Resources.PropertyBindingGetValueFailed">
            <summary>
              Looks up a localized string similar to PropertyBinding.GetValue() threw an exception..
            </summary>
        </member>
        <member name="P:NQuery.Resources.PropertyNotInitialized">
            <summary>
              Looks up a localized string similar to The {0} property has not been initialized..
            </summary>
        </member>
        <member name="P:NQuery.Resources.QueryCompilationFailed">
            <summary>
              Looks up a localized string similar to Query could not be compiled.{0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.SelectExpressionNotAggregatedAndNoGroupBy">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is invalid in the select list because it is not contained in an aggregate function and there is no GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.SelectExpressionNotAggregatedOrGrouped">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanElemenClassName">
            <summary>
              Looks up a localized string similar to Show Plan Element.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupDefinedValues">
            <summary>
              Looks up a localized string similar to Defined Values.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupGroupBy">
            <summary>
              Looks up a localized string similar to Group By.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupOrderBy">
            <summary>
              Looks up a localized string similar to Order By.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupOuterReferences">
            <summary>
              Looks up a localized string similar to Outer References.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupOutputList">
            <summary>
              Looks up a localized string similar to Output List.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupStatistics">
            <summary>
              Looks up a localized string similar to Statistics.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanGroupTieColumns">
            <summary>
              Looks up a localized string similar to Tie Columns.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyColumn">
            <summary>
              Looks up a localized string similar to Column.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyDataType">
            <summary>
              Looks up a localized string similar to DataType.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyEmpty">
            <summary>
              Looks up a localized string similar to Empty.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyHashKeysBuild">
            <summary>
              Looks up a localized string similar to Hash Keys Build.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyHashKeysProbe">
            <summary>
              Looks up a localized string similar to Hash Keys Probe.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyIndex">
            <summary>
              Looks up a localized string similar to Index.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyLimit">
            <summary>
              Looks up a localized string similar to Limit.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyLogicalOperator">
            <summary>
              Looks up a localized string similar to Logical Operator.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyOrder">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyOutputName">
            <summary>
              Looks up a localized string similar to Output Name.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyPassthru">
            <summary>
              Looks up a localized string similar to Passthru.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyPredicate">
            <summary>
              Looks up a localized string similar to Predicate.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyProbe">
            <summary>
              Looks up a localized string similar to Probe.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyProbeColumn">
            <summary>
              Looks up a localized string similar to Probe Column.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyProbeResidual">
            <summary>
              Looks up a localized string similar to Probe Residual.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeySource">
            <summary>
              Looks up a localized string similar to Source.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyStatisticsAverageRowCount">
            <summary>
              Looks up a localized string similar to Average Row Count.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyStatisticsOpenCount">
            <summary>
              Looks up a localized string similar to Open Count.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyStatisticsRowCount">
            <summary>
              Looks up a localized string similar to Row Count.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyTable">
            <summary>
              Looks up a localized string similar to Table.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyTarget">
            <summary>
              Looks up a localized string similar to Target.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyWarning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyWithStack">
            <summary>
              Looks up a localized string similar to With Stack.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanKeyWithTies">
            <summary>
              Looks up a localized string similar to With Ties.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorDistinctSort">
            <summary>
              Looks up a localized string similar to Distinct Sort.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorEagerSpool">
            <summary>
              Looks up a localized string similar to Eager Spool.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorFullOuterJoin">
            <summary>
              Looks up a localized string similar to Full Outer Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorInnerJoin">
            <summary>
              Looks up a localized string similar to Inner Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorLazySpool">
            <summary>
              Looks up a localized string similar to Lazy Spool.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorLeftAntiSemiJoin">
            <summary>
              Looks up a localized string similar to Left Anti Semi Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorLeftOuterJoin">
            <summary>
              Looks up a localized string similar to Left Outer Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorLeftSemiJoin">
            <summary>
              Looks up a localized string similar to Left Semi Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorRightAntiSemiJoin">
            <summary>
              Looks up a localized string similar to Right Anti Semi Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorRightOuterJoin">
            <summary>
              Looks up a localized string similar to Right Outer Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorRightSemiJoin">
            <summary>
              Looks up a localized string similar to Right Semi Join.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanLogicalOperatorSort">
            <summary>
              Looks up a localized string similar to Sort.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanSortOrderAscending">
            <summary>
              Looks up a localized string similar to ASC.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanSortOrderDescending">
            <summary>
              Looks up a localized string similar to DESC.
            </summary>
        </member>
        <member name="P:NQuery.Resources.ShowPlanWarningNoJoinPredicate">
            <summary>
              Looks up a localized string similar to No join predicate.
            </summary>
        </member>
        <member name="P:NQuery.Resources.SimpleExpressionExpected">
            <summary>
              Looks up a localized string similar to Found &apos;{0}&apos; but &apos;&lt;Expression&gt;&apos; expected..
            </summary>
        </member>
        <member name="P:NQuery.Resources.SubqueryReturnedMoreThanRow">
            <summary>
              Looks up a localized string similar to Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, &lt;, &lt;= , &gt;, &gt;= or when the subquery is used as an expression..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TableMustHaveAtLeastOneColumn">
            <summary>
              Looks up a localized string similar to A table must have at least one column..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TableProviderAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A table provider for type &apos;{0}&apos; has already been assigned..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TableReferenceExpected">
            <summary>
              Looks up a localized string similar to Found &apos;{0}&apos; but &apos;&lt;Table Reference&gt;&apos; expected.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TableRefInaccessible">
            <summary>
              Looks up a localized string similar to Table &apos;{0}: {1}&apos; is introduced in a different branch within the join hierarchy and is therefore inaccessible..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TargetTypeMismatch">
            <summary>
              Looks up a localized string similar to Cannot narrow down the target type to &apos;{1}&apos; since the static expression type &apos;{0}&apos; would not be assignable from the new target type &apos;{1}&apos; anymore..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenDateLiteral">
            <summary>
              Looks up a localized string similar to &lt;Date Literal&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenEndOfFile">
            <summary>
              Looks up a localized string similar to &lt;End-of-File&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenExpected">
            <summary>
              Looks up a localized string similar to Found &apos;{0}&apos; but expected &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenIdentifier">
            <summary>
              Looks up a localized string similar to &lt;Identifier&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenNumberLiteral">
            <summary>
              Looks up a localized string similar to &lt;Number Literal&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenStringLiteral">
            <summary>
              Looks up a localized string similar to &lt;String Literal&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TokenUnknown">
            <summary>
              Looks up a localized string similar to &lt;Unknown&gt;.
            </summary>
        </member>
        <member name="P:NQuery.Resources.TooManyExpressionsInSelectListOfSubquery">
            <summary>
              Looks up a localized string similar to Only one expression can be specified in the select list when the subquery is not introduced with EXISTS..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TopWithTiesRequiresOrderBy">
            <summary>
              Looks up a localized string similar to The TOP N WITH TIES clause is not allowed without a corresponding ORDER BY clause..
            </summary>
        </member>
        <member name="P:NQuery.Resources.TypeAlreadyRegistered">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnaryOperatorFailed">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0} {1}&apos; threw an exception: {3}{5}Operator method: &apos;{2}&apos;. Argument: &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredColumn">
            <summary>
              Looks up a localized string similar to Column &apos;{1}&apos; not declared in table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredEntity">
            <summary>
              Looks up a localized string similar to The identifier &apos;{0}&apos; does not refer to a column, table or property..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredFunction">
            <summary>
              Looks up a localized string similar to Function &apos;{0}({1})&apos; is not declared..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredMethod">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a method &apos;{1}({2})&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredParameter">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; is not declared..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredProperty">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a property &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredTable">
            <summary>
              Looks up a localized string similar to Table &apos;{0}&apos; is not declared..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UndeclaredType">
            <summary>
              Looks up a localized string similar to Cannot resolve type: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnhandledCaseLabel">
            <summary>
              Looks up a localized string similar to Unhandled case label: {0}.
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error {0}..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnterminatedComment">
            <summary>
              Looks up a localized string similar to Comment &apos;{0}&apos; is not properly terminated..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnterminatedDate">
            <summary>
              Looks up a localized string similar to Date &apos;{0}&apos; is not properly terminated..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnterminatedParenthesizedIdentifier">
            <summary>
              Looks up a localized string similar to Parenthesized identifier &apos;{0}&apos; is not properly terminated..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnterminatedQuotedIdentifier">
            <summary>
              Looks up a localized string similar to Quoted identifier &apos;{0}&apos; is not properly terminated..
            </summary>
        </member>
        <member name="P:NQuery.Resources.UnterminatedString">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; is not properly terminated..
            </summary>
        </member>
        <member name="P:NQuery.Resources.WhenMustEvaluateToBoolIfCaseInputIsOmitted">
            <summary>
              Looks up a localized string similar to WHEN expression &apos;{0}&apos; must evaluate to &apos;{1}&apos; if CASE input expression is omitted..
            </summary>
        </member>
        <member name="P:NQuery.Resources.WhereClauseMustEvaluateToBool">
            <summary>
              Looks up a localized string similar to WHERE clause must evaluate to BOOLEAN expression..
            </summary>
        </member>
        <member name="T:NQuery.SourceLocation">
            <summary>
            Represents a location in the source code. Due to the fact that line and column are stored together on 32 bit the
            maximum line is limited to 2^21 (2,097,152) whereby the maximum column is limited to 2^11 (2,048). That should not
            be a hard restriction since the same limits apply to the C# compiler.
            </summary>
            <remarks>
            Both <see cref="P:NQuery.SourceLocation.Line"/> and <see cref="P:NQuery.SourceLocation.Column"/> are zero based.
            </remarks>
        </member>
        <member name="F:NQuery.SourceLocation.MaxColumn">
            <summary>
            Maximum column index.
            </summary>
        </member>
        <member name="F:NQuery.SourceLocation.MaxLine">
            <summary>
            Maximum line index.
            </summary>
        </member>
        <member name="M:NQuery.SourceLocation.#ctor(System.Int32)">
            <summary>
            Creates a new <c>SourceLocation</c> with the specified 32 bit value representing the line/col information. The line
            index is stored in the higher 21 bit whereby the column index is stored in the lower 11 bit.
            </summary>
            <param name="pos">Column and line index stored in one <see cref="T:System.Int32"/></param>
        </member>
        <member name="M:NQuery.SourceLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <c>SourceLocation</c> with the specified column and line.
            </summary>
            <param name="column">Column index (must not exceed 2,048)</param>
            <param name="line">Line index (must not exceed 2,097,152)</param>
        </member>
        <member name="F:NQuery.SourceLocation.None">
            <summary>
            Represents a source pos that is not legal.
            </summary>
        </member>
        <member name="F:NQuery.SourceLocation.Empty">
            <summary>
            Represents an empty source location i.e. col = 0, line = 0.
            </summary>
        </member>
        <member name="F:NQuery.SourceLocation.MinValue">
            <summary>
            Represents the smallest possible value of a <see cref="T:NQuery.SourceLocation"/>.
            </summary>
        </member>
        <member name="F:NQuery.SourceLocation.MaxValue">
            <summary>
            Represents the largest possible value of a <see cref="T:NQuery.SourceLocation"/>.
            </summary>
        </member>
        <member name="P:NQuery.SourceLocation.Column">
            <summary>
            Gets or sets the column index for this source location (zero based). Must not exceed 2,048.
            </summary>
        </member>
        <member name="P:NQuery.SourceLocation.Line">
            <summary>
            Gets or sets the line index for this source location (zero based). Must not exceed 2,097,152.
            </summary>
        </member>
        <member name="T:NQuery.Identifier">
            <summary>
            Represents an identifier in the query engine. This class cannot be directly instantiated. Instead use
             <see cref="M:NQuery.Identifier.CreateVerbatim(System.String)"/>, <see cref="M:NQuery.Identifier.CreateNonVerbatim(System.String)"/>, or <see cref="M:NQuery.Identifier.FromSource(System.String)"/>.
            </summary>
        </member>
        <member name="M:NQuery.Identifier.CreateVerbatim(System.String)">
            <summary>
            Creates a new verbatim (i.e. quoted) identifier.
            </summary>
            <param name="text">The textual value without any masking characters.</param>
        </member>
        <member name="M:NQuery.Identifier.CreateNonVerbatim(System.String)">
            <summary>
            Creates a new non-verbatim (i.e. normal or parenthesized) identifier.
            </summary>
            <param name="text">The textual value without any masking characters.</param>
        </member>
        <member name="M:NQuery.Identifier.InternalFromSource(System.String)">
            <summary>
            Creates a new identifier from a source-code representation.
            </summary>
            <remarks>
            This method also accepts malformed identifiers. This is crucial to allow lexer and parser to use this class
            even if the identifier is not correct. However, in this case the error has already been handled by the lexer.
            </remarks>
            <param name="text">The textual value including masking characters.</param>
        </member>
        <member name="M:NQuery.Identifier.FromSource(System.String)">
            <summary>
            Creates a new identifier from a source-code representation.
            </summary>
            <param name="text">The textual value including masking characters.</param>
        </member>
        <member name="M:NQuery.Identifier.MustBeParenthesized(System.String)">
            <summary>
            Detects whether a given text would not form a valid identifier and therefore must be parenthesized.
            </summary>
            <param name="text">The text of the identifier</param>
        </member>
        <member name="M:NQuery.Identifier.ToSource">
            <summary>
            Returns the source-code representation of this identifier.
            </summary>
        </member>
        <member name="M:NQuery.Identifier.Equals(NQuery.Identifier)">
            <summary>
            Compares this instance of an identifier to another instance.
            </summary>
            <param name="identifier">Other identfier to compare to.</param>
        </member>
        <member name="M:NQuery.Identifier.Matches(System.String)">
            <summary>
            Checks whether this identifier matches the given text. If <see cref="P:NQuery.Identifier.Verbatim"/> is <see langword="true"/>
            the comparison is done case-sensitive otherwise it is case-insensitive.
            </summary>
            <param name="text">The text to match against</param>
        </member>
        <member name="M:NQuery.Identifier.Matches(NQuery.Identifier)">
            <summary>
            Checks whether this identifier matches the given identifier.
            To match <paramref name="identifier"/> the following must be true:
            <ul>
            	<li>The value of <see cref="P:NQuery.Identifier.Verbatim"/> of this instance and <paramref name="identifier"/> must be equal.</li>
            	<li>If <see cref="P:NQuery.Identifier.Verbatim"/> is <see langword="true"/> the value of <see cref="P:NQuery.Identifier.Text"/> of this instance and <paramref name="identifier"/> must be equal (compared case-sensitive).</li>
            	<li>If <see cref="P:NQuery.Identifier.Verbatim"/> is <see langword="false"/> the value of <see cref="P:NQuery.Identifier.Text"/> of this instance and <paramref name="identifier"/> must be equal (compared case-insensitive).</li>
            </ul>
            </summary>
            <param name="identifier">The identifier to match against</param>
        </member>
        <member name="P:NQuery.Identifier.Text">
            <summary>
            Gets the textual value of this identifier, i.e. the name without any masking characters (e.g. quotes, brackets).
            </summary>
        </member>
        <member name="P:NQuery.Identifier.Verbatim">
            <summary>
            Gets a value indicating whether the textual value of this identifer is taken verbatim. This is equivalent to
            a quoted identifier.
            </summary>
        </member>
        <member name="P:NQuery.Identifier.Parenthesized">
            <summary>
            Gets a value indicating whether the textucal value can only be represented using brackets.
            </summary>
        </member>
        <member name="T:NQuery.SourceRange">
            <summary>
            Represents a range in the source code.
            </summary>
        </member>
        <member name="M:NQuery.SourceRange.#ctor(NQuery.SourceLocation,NQuery.SourceLocation)">
            <summary>
            Creates a new source range spawning from the given start location to the given end location.
            </summary>
            <param name="startLocation">postion to start from</param>
            <param name="endLocation">Location to end</param>
        </member>
        <member name="M:NQuery.SourceRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new source range spawning from the given start location to the given end location.
            </summary>
            <param name="startCol">Column index to start from</param>
            <param name="startLine">Line index to start from</param>
            <param name="endCol">Column index to end</param>
            <param name="endLine">Line index to end</param>
        </member>
        <member name="M:NQuery.SourceRange.#ctor(NQuery.SourceLocation)">
            <summary>
            Creates a new source range where start and end location refer to the same location.
            </summary>
            <param name="sourceLocation">Location to which <see cref="P:NQuery.SourceRange.StartLocation"/> and <see cref="P:NQuery.SourceRange.EndLocation"/> should refer</param>
        </member>
        <member name="M:NQuery.SourceRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new source range where start and end location refer to the same location.
            </summary>
            <param name="col">Column index for <see cref="P:NQuery.SourceRange.StartLocation"/> and <see cref="P:NQuery.SourceRange.EndLocation"/></param>
            <param name="line">Line index for <see cref="P:NQuery.SourceRange.StartLocation"/> and <see cref="P:NQuery.SourceRange.EndLocation"/></param>
        </member>
        <member name="F:NQuery.SourceRange.None">
            <summary>
            Represents a source range that is not legal.
            </summary>
        </member>
        <member name="F:NQuery.SourceRange.Empty">
            <summary>
            Represents an empty source range i.e. StartPos = (0/0), EndPos(0/0)
            </summary>
        </member>
        <member name="F:NQuery.SourceRange.Infinite">
            <summary>
            Represents an infinite range.
            </summary>
        </member>
        <member name="M:NQuery.SourceRange.Normalize">
            <summary>
            Normalizes this source range. For normalized ranges <see cref="P:NQuery.SourceRange.StartLocation"/> is guaranteed to be before <see cref="P:NQuery.SourceRange.EndLocation"/>.
            </summary>
        </member>
        <member name="M:NQuery.SourceRange.Contains(NQuery.SourceLocation)">
            <summary>
            Checks if this source range contains the given source location. The <see cref="P:NQuery.SourceRange.StartLocation"/> and <see cref="P:NQuery.SourceRange.EndLocation"/> are
            both considered to be part of the range.
            </summary>
            <param name="location">the location to check</param>
        </member>
        <member name="M:NQuery.SourceRange.Contains(NQuery.SourceRange)">
            <summary>
            Checks if this source range fully contains another given source range.
            </summary>
            <param name="range">range to check</param>
        </member>
        <member name="P:NQuery.SourceRange.StartLocation">
            <summary>
            Gets or sets the start location for this range.
            </summary>
        </member>
        <member name="P:NQuery.SourceRange.EndLocation">
            <summary>
            Gets or sets the end location for this range.
            </summary>
        </member>
        <member name="P:NQuery.SourceRange.StartColumn">
            <summary>
            Gets or sets the column of the start location.
            </summary>
        </member>
        <member name="P:NQuery.SourceRange.StartLine">
            <summary>
            Gets or sets the line of the start location.
            </summary>
        </member>
        <member name="P:NQuery.SourceRange.EndColumn">
            <summary>
            Gets or sets the column of the end location.
            </summary>
        </member>
        <member name="P:NQuery.SourceRange.EndLine">
            <summary>
            Gets or sets the line of the end location.
            </summary>
        </member>
        <member name="T:NQuery.CompilationError">
            <summary>
            Represents a compile-time error contained in <see cref="T:NQuery.CompilationException"/>.
            </summary>
        </member>
        <member name="P:NQuery.CompilationError.SourceRange">
            <summary>
            Gets the <see cref="P:NQuery.CompilationError.SourceRange"/> related to this error.
            </summary>
        </member>
        <member name="P:NQuery.CompilationError.Id">
            <summary>
            Gets the <see cref="T:NQuery.ErrorId"/> of this error.
            </summary>
        </member>
        <member name="P:NQuery.CompilationError.Text">
            <summary>
            Gets the message of this error.
            </summary>
        </member>
        <member name="T:NQuery.CompilationErrorCollection">
            <summary>
            Represents a read-only collection of compile-time errors contained in <see cref="P:NQuery.CompilationException.CompilationErrors"/>.
            </summary>
        </member>
        <member name="T:NQuery.ErrorId">
            <summary>
            Represents the error id used by <see cref="P:NQuery.CompilationError.Id"/>.
            </summary>
        </member>
        <member name="T:NQuery.CompilationException">
            <summary>
            Exception thrown by <!--<see cref="Query"/> and <see cref="Expression{T}"/>--> to indicate the query
            or expression could not be compiled. Details are contained in the <see cref="P:NQuery.CompilationException.CompilationErrors"/> property.
            </summary>
        </member>
        <member name="T:NQuery.NQueryException">
            <summary>
            Base class for all exceptions thrown by the query engine.
            </summary>
        </member>
        <member name="M:NQuery.NQueryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.NQueryException"/> class.
            </summary>
        </member>
        <member name="M:NQuery.NQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.NQueryException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NQuery.NQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.NQueryException"/> class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not <see langword="null"/>, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:NQuery.NQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.NQueryException"/> class with serialized data.  
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NQuery.CompilationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.CompilationException"/> class.
            </summary>
        </member>
        <member name="M:NQuery.CompilationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.CompilationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NQuery.CompilationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.CompilationException"/> class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not <see langword="null"/>, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:NQuery.CompilationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.CompilationException"/> class with serialized data.  
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception name="ArgumentNullException">The <paramref name="info"/> parameter is <see langword="null"/>.</exception>
            <exception name="SerializationException">The class name is <see langword="null"/> or <see cref="P:System.Exception.HResult"/> is zero (<c>0</c>).</exception>
        </member>
        <member name="M:NQuery.CompilationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:NQuery.CompilationException.CompilationErrors">
            <summary>
            Gets a read-only collection with the compile-time errors.
            </summary>
        </member>
        <member name="T:NQuery.Evaluatable">
            <summary>
            Base class for an evaluatable element, such as <see cref="T:NQuery.Query"/> or <see cref="T:NQuery.Expression`1"/>.
            </summary>
        </member>
        <member name="M:NQuery.Evaluatable.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Evaluatable"/> with no <see cref="P:NQuery.Evaluatable.Text"/> and an
            empty <see cref="P:NQuery.Evaluatable.DataContext"/>.
            </summary>
        </member>
        <member name="M:NQuery.Evaluatable.#ctor(NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Evaluatable"/> with the given <see cref="P:NQuery.Evaluatable.DataContext"/> and
            no <see cref="P:NQuery.Evaluatable.Text"/>.
            </summary>
            <param name="dataContext">The data context to set <see cref="P:NQuery.Evaluatable.DataContext"/> to.</param>
        </member>
        <member name="M:NQuery.Evaluatable.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Evaluatable"/> with the given <see cref="P:NQuery.Evaluatable.Text"/> and
            an empty <see cref="P:NQuery.Evaluatable.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Evaluatable.#ctor(System.String,NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Evaluatable"/> with the given <see cref="P:NQuery.Evaluatable.Text"/>.
            and <see cref="P:NQuery.Evaluatable.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <param name="dataContext">The data context to set <see cref="P:NQuery.Evaluatable.DataContext"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Evaluatable.GetCodeAssistanceContextProvider">
            <summary>
            Gets a code assistance context provider for this evaluatble.
            </summary>
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="P:NQuery.Evaluatable.DataContext">
            <summary>
            Gets or sets the data context of this evaluatable.
            </summary>
        </member>
        <member name="P:NQuery.Evaluatable.Parameters">
            <summary>
            Gets the parameters of this evaluatable.
            </summary>
        </member>
        <member name="P:NQuery.Evaluatable.Text">
            <summary>
            Gets ot sets the text of this evaluatable.
            </summary>
        </member>
        <member name="E:NQuery.Evaluatable.TextChanged">
            <summary>
            Raised when either the value of the property <see cref="P:NQuery.Evaluatable.Text"/> has been changed.
            </summary>
        </member>
        <member name="E:NQuery.Evaluatable.DataContextChanged">
            <summary>
            Raised when either the value of the property <see cref="P:NQuery.Evaluatable.DataContext"/> has been changed.
            </summary>
        </member>
        <member name="E:NQuery.Evaluatable.CompilationFailed">
            <summary>
            Raised when the compilation of this evaluatable failed.
            </summary>
        </member>
        <member name="E:NQuery.Evaluatable.CompilationSucceeded">
            <summary>
            Raised when the compilation of this evaluatable completed successfully.
            </summary>
        </member>
        <member name="E:NQuery.Evaluatable.CompiledStateInvalidated">
            <summary>
            Raised when the compiled state of this evaluatable becomes invalid.
            </summary>
        </member>
        <member name="T:NQuery.Expression`1">
            <summary>
            Represents an evaluatable expresssion. The result is of type <typeparamref name="T"/> and can be obtained by <see cref="M:NQuery.Expression`1.Evaluate"/>.
            </summary>
            <typeparam name="T">The type the expression should evaluate to. If the type cannot be determined at compile-time you can use 
            <see cref="T:System.Object"/> and set <see cref="P:NQuery.Expression`1.TargetType"/> to an appropriate value.</typeparam>
            <example>
            <p>For an example see <a href="/Quick Start/ExpressionQuickStart.html">Expression Quick Start</a>.</p>
            </example>
        </member>
        <member name="M:NQuery.Expression`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Expression`1"/> with no <see cref="P:NQuery.Evaluatable.Text"/> and an
            empty <see cref="T:NQuery.DataContext"/>.
            </summary>
        </member>
        <member name="M:NQuery.Expression`1.#ctor(NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Expression`1"/> with the given <see cref="T:NQuery.DataContext"/> and
            no <see cref="P:NQuery.Evaluatable.Text"/>.
            </summary>
            <param name="dataContext">The data context to set <see cref="T:NQuery.DataContext"/> to.</param>
        </member>
        <member name="M:NQuery.Expression`1.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Expression`1"/> with the given <see cref="P:NQuery.Evaluatable.Text"/> and
            an empty <see cref="T:NQuery.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Expression`1.#ctor(System.String,NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Expression`1"/> with the given <see cref="P:NQuery.Evaluatable.Text"/>.
            and <see cref="T:NQuery.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <param name="dataContext">The data context to set <see cref="T:NQuery.DataContext"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Expression`1.Resolve">
            <summary>
            Resolves the expression to get the <see cref="T:System.Type"/> it will evaluate to.
            </summary>
            <remarks>
            <p>Although the expression object is typed it is possible that the expression is known to return a more specific object. For 
            instance imagine this:</p>
            <code>
            // class Base : { }
            // class Derived : Base { }
            
            Expression&lt;Base&gt; expr = new Expression&lt;Base&gt;();
            expr.Parameters.Add("MyDerived", typeof(Derived), new Derived());
            expr.Text = "MyDerived";
            </code>
            <p>In this case <c>expr.Resolve()</c> will return <c>typeof(Derived)</c>.</p>
            </remarks>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as expression.</exception>
        </member>
        <member name="M:NQuery.Expression`1.Evaluate">
            <summary>
            Evaluates the expression and returns a value of type <typeparamref name="T"/> representing its value.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as expression.</exception>
            <exception cref="T:NQuery.RuntimeException">Thrown when an error during evaluation occured.</exception>
        </member>
        <member name="M:NQuery.Expression`1.GetCodeAssistanceContextProvider">
            <summary>
            Gets a code assistance context provider for this expression.
            </summary>
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="P:NQuery.Expression`1.NullValue">
            <summary>
            Gets or sets the value returned when the expression evaluates to <c>NULL</c>.
            </summary>
        </member>
        <member name="P:NQuery.Expression`1.TargetType">
            <summary>
            Gets or sets the target type of this expression.
            </summary>
            <remarks>
            <p>Normally, <see cref="P:NQuery.Expression`1.TargetType"/> is the runtime type information of <typeparamref name="T"/>. If the type cannot be 
            determined at compile time one can use <c>Expression&lt;object&gt;</c> in conjunction with an appropiate setting
            for <see cref="P:NQuery.Expression`1.TargetType"/>.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <typeparamref name="T"/> is not assignable from <paramref name="value"/>.</exception>
        </member>
        <member name="T:NQuery.Query">
            <summary>
            Represents a <c>SELECT</c> query against a set of tables, functions, and parameters. The result is a <see cref="T:System.Data.DataTable"/>
            that can be obtained by <see cref="M:NQuery.Query.ExecuteDataTable"/>.
            </summary>
            <example>
            <p>For an example see <a href="/Quick Start/QueryQuickStart.html">Query Quick Start</a>.</p>
            </example>
        </member>
        <member name="M:NQuery.Query.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Query"/> with no <see cref="P:NQuery.Evaluatable.Text"/> and an
            empty <see cref="T:NQuery.DataContext"/>.
            </summary>
        </member>
        <member name="M:NQuery.Query.#ctor(NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Query"/> with the given <see cref="T:NQuery.DataContext"/> and
            no <see cref="P:NQuery.Evaluatable.Text"/>.
            </summary>
            <param name="dataContext">The data context to set <see cref="T:NQuery.DataContext"/> to.</param>
        </member>
        <member name="M:NQuery.Query.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Query"/> with the given <see cref="P:NQuery.Evaluatable.Text"/> and
            an empty <see cref="T:NQuery.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Query.#ctor(System.String,NQuery.DataContext)">
            <summary>
            Creates a new instance of <see cref="T:NQuery.Query"/> with the given <see cref="P:NQuery.Evaluatable.Text"/>.
            and <see cref="T:NQuery.DataContext"/>.
            </summary>
            <param name="text">The text to set <see cref="P:NQuery.Evaluatable.Text"/> to.</param>
            <param name="dataContext">The data context to set <see cref="T:NQuery.DataContext"/> to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.Query.GetShowPlan">
            <summary>
            Returns the execution plan of the compiled query that shows which optimizations and joins have been created by the 
            query engine.
            </summary>
            <remarks>
            <p>The execution plan is a tree-like data structure. Each node represents a physical operation used to generate the
            result. To supply additional details each node also has properties indicating what columns are defined and returned 
            by the operation.</p>
            <p>It is provided for informational purposes only and is read-only.</p>
            </remarks>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
        </member>
        <member name="M:NQuery.Query.ExecuteDataTable">
            <summary>
            Executes the <c>SELECT</c> query specified in <see cref="P:NQuery.Evaluatable.Text"/>.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
            <exception cref="T:NQuery.RuntimeException">Thrown when an error during execution occured.</exception>
        </member>
        <member name="M:NQuery.Query.ExecuteSchemaDataTable">
            <summary>
            Resolves the <c>SELECT</c> query specified in <see cref="P:NQuery.Evaluatable.Text"/> and returns a <see cref="T:System.Data.DataTable"/>.
            Since the query is not actually executed the returned <see cref="T:System.Data.DataTable"/> can only be used to retreive schema 
            information.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
        </member>
        <member name="M:NQuery.Query.ExecuteScalar">
            <summary>
            Executes the <c>SELECT</c> query specified in <see cref="P:NQuery.Evaluatable.Text"/> and returns the first value of
            the first row only.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
            <exception cref="T:NQuery.RuntimeException">Thrown when an error during execution occured.</exception>
        </member>
        <member name="M:NQuery.Query.ExecuteDataReader">
            <summary>
            Executes the <c>SELECT</c> query specified in <see cref="P:NQuery.Evaluatable.Text"/> and returns a <see cref="T:NQuery.QueryDataReader"/>.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
            <exception cref="T:NQuery.RuntimeException">Thrown when an error during execution occured.</exception>
        </member>
        <member name="M:NQuery.Query.ExecuteSchemaReader">
            <summary>
            Resolves the <c>SELECT</c> query specified in <see cref="P:NQuery.Evaluatable.Text"/> and returns a <see cref="T:NQuery.QueryDataReader"/>.
            Since the query is not actually executed the returned <see cref="T:NQuery.QueryDataReader"/> can only be used to retreive schema 
            information.
            </summary>
            <exception cref="T:NQuery.CompilationException">Thrown when <see cref="P:NQuery.Evaluatable.Text"/> could not be compiled as query.</exception>
        </member>
        <member name="M:NQuery.Query.GetCodeAssistanceContextProvider">
            <summary>
            Gets a code assistance context provider for this query.
            </summary>
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="T:NQuery.QueryDataReader">
            <summary>
            Provides a way of reading a forward-only stream of rows from a <see cref="T:NQuery.Query"/>. This class cannot be inherited. 
            </summary>
        </member>
        <member name="M:NQuery.QueryDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NQuery.QueryDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader" /> Object.
            </summary>
        </member>
        <member name="M:NQuery.QueryDataReader.NextResult">
            <summary>
             Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>
            <see langword="true" /> if there are more rows; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NQuery.QueryDataReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader" /> to the next record.
            </summary>
            <returns>
            <see langword="true" /> if there are more rows; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NQuery.QueryDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata
            of the <see cref="T:System.Data.IDataReader" />. 
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable" /> that describes the column metadata.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.IDataReader" /> is closed.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" />
            that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be
            returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> .
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object" /> which will contain the field value upon return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.
            </exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
            <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
        </member>
        <member name="M:NQuery.QueryDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find. </param>
            <returns>
            The index of the named field.
            </returns>
        </member>
        <member name="M:NQuery.QueryDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i"> The zero-based column ordinal.</param>
            <returns>
            The value of the column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i"> The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as
            an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal. </param>
            <param name="fieldOffset">The index within the field from which to begin the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to begin the read operation. </param>
            <param name="length">The number of bytes to read. </param>
            <returns>
            The actual number of bytes read.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="length">The number of bytes to read. </param>
            <param name="bufferoffset">The index for <paramref name="buffer" /> to begin the read operation. </param>
            <param name="fieldoffset">The index within the row from which to begin the read operation. </param>
            <returns>
            The actual number of characters read.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the guid value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The guid value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.
            </exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The string value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the spcified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the spcified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.GetData(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Data.IDataReader" /> to be used when the field points to more remote structured data.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            An <see cref="T:System.Data.IDataReader" /> to be used when the field points to more remote structured data.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="M:NQuery.QueryDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find. </param>
            <returns>
            <see langword="true" /> if the specified field is set to null, otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
        </member>
        <member name="P:NQuery.QueryDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:NQuery.QueryDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:NQuery.QueryDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:NQuery.QueryDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:NQuery.QueryDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <param name="i">The index of the column to get.</param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
        </member>
        <member name="P:NQuery.QueryDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="T:NQuery.RuntimeException">
            <summary>
            Exception thrown by <!--<see cref="Query"/> and <see cref="Exception"/>--> to indicate the query
            or expression could not be evaluated due to an error.
            </summary>
        </member>
        <member name="M:NQuery.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:NQuery.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.RuntimeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NQuery.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.RuntimeException"/> class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not <see langword="null"/>, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:NQuery.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NQuery.RuntimeException"/> class with serialized data.  
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NQuery.MetadataContext.FindProperty(System.Type,NQuery.Identifier)">
            <summary>
            Returns all properties matching the identifier.
            </summary>
            <param name="type">The type to search the properties in.</param>
            <param name="identifier">The identifier to match the properties.</param>
        </member>
        <member name="M:NQuery.MetadataContext.FindMethod(System.Type,NQuery.Identifier)">
            <summary>
            Returns all methods matching the identifier.
            </summary>
            <param name="type">The type to search the methods in.</param>
            <param name="identifier">The identifier to match the methods.</param>
        </member>
        <member name="T:NQuery.TypeRegistry`1">
            <summary>
            This class is used to store references to types. The only thing that is special about this class
            is that it also allows to return derived types. For exmaple if there is the class <c>D</c> derived
            from class <c>B</c> and <see cref="T:NQuery.TypeRegistry`1"/> contains <c>D</c> but not <c>B</c> a request for
            <c>B</c> will return <c>D</c>.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlan">
            <summary>
            Represents an execution plan of <see cref="T:NQuery.Query"/>. Provides methods for writing to plain text and XML.
            </summary>
        </member>
        <member name="M:NQuery.ShowPlan.ToXml">
            <summary>
            Creates an XML document containing this execution plan.
            </summary>
        </member>
        <member name="M:NQuery.ShowPlan.FromXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Loads an execution plan from an XML document.
            </summary>
            <param name="navigable">An XPath navigable object to load the execution plan from</param>
        </member>
        <member name="M:NQuery.ShowPlan.WriteTo(System.IO.TextWriter,System.Int32)">
            <summary>
            Writes this execution plan to the given text writer.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
            <param name="indent">The number of spaces used to indent the node levels.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="textWriter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NQuery.ShowPlan.ToString">
            <summary>
            Creates a textual representation of this execution plan.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NQuery.ShowPlan.Root">
            <summary>
            Gets the root element of this execution plan.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlanElement">
            <summary>
            Represents an element in an execution plan of <see cref="T:NQuery.Query"/>.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanElement.Operator">
            <summary>
            Gets the physical operator represented by this node.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanElement.Properties">
            <summary>
            Gets a collection of properties representing the configuration of this node.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanElement.Children">
            <summary>
            Gets a collection with all children of this execution plan node.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlanElementCollection">
            <summary>
            Represents a read-only collection of <see cref="T:NQuery.ShowPlanElement"/>.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlanOperator">
            <summary>
            Represents the physical operator of a <see cref="T:NQuery.ShowPlanElement"/>.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Select">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Select.html">Select</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.TableScan">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Table Scan.html">Table Scan</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.NestedLoops">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Nested Loops.html">Nested Loops</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.ConstantScan">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Constant Scan.html">Constant Scan</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.ComputeScalar">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Compute Scalar.html">Compute Scalar</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Concatenation">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Concatenation.html">Concatenation</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Sort">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Sort.html">Sort</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.StreamAggregate">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Stream Aggregate.html">Stream Aggregate</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Top">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Top.html">Top</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Filter">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Filter.html">Filter</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.Assert">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Assert.html">Assert</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.TableSpool">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Table Spool.html">Table Spool</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.IndexSpool">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Index Spool.html">Index Spool</a> operator.
            </summary>
        </member>
        <member name="F:NQuery.ShowPlanOperator.HashMatch">
            <summary>
            Indicates that the <see cref="T:NQuery.ShowPlanElement"/> represents the 
            <a href="\Execution Plan Reference\Hash Match.html">Hash Match</a> operator.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlanProperty">
            <summary>
            Represents a property of a <see cref="T:NQuery.ShowPlanElement"/>.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanProperty.FullName">
            <summary>
            Gets the full name of this property. Properties have a hierarchical structure. The hierarchy is given
            by <c>"."</c> characters. Double dots (<c>".."</c>) indicate a masked dot; in this case the dot does not
            indicate the start of a new level.
            </summary>
            <remarks>
            For easier access you might want to use <see cref="P:NQuery.ShowPlanProperty.PathElements"/> which contains a correctly splitted
            collection of all levels.
            </remarks>
        </member>
        <member name="P:NQuery.ShowPlanProperty.Name">
            <summary>
            Gets the simple name of this property i.e. the last element in <see cref="P:NQuery.ShowPlanProperty.PathElements"/> and right most
            level in <see cref="P:NQuery.ShowPlanProperty.FullName"/>.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanProperty.PathElements">
            <summary>
            Gets a collection of all levels of the <see cref="P:NQuery.ShowPlanProperty.FullName"/> of this <see cref="T:NQuery.ShowPlanProperty"/>.
            </summary>
        </member>
        <member name="P:NQuery.ShowPlanProperty.Value">
            <summary>
            Gets the value of this <see cref="T:NQuery.ShowPlanProperty"/>.
            </summary>
        </member>
        <member name="T:NQuery.ShowPlanPropertyCollection">
            <summary>
            Represents a read-only collection of <see cref="T:NQuery.ShowPlanProperty"/>.
            </summary>
        </member>
        <member name="M:NQuery.ShowPlanPropertyCollection.Contains(System.String)">
            <summary>
            Checks whether a <see cref="T:NQuery.ShowPlanProperty"/> with the given <see cref="P:NQuery.ShowPlanProperty.FullName"/> is
            contained in this collection.
            </summary>
            <param name="fullName">The <see cref="P:NQuery.ShowPlanProperty.FullName"/> of a <see cref="T:NQuery.ShowPlanProperty"/> to search for</param>
            <returns>If a <see cref="T:NQuery.ShowPlanProperty"/> with the given <see cref="P:NQuery.ShowPlanProperty.FullName"/> exists the return value 
            is <see langword="true"/>. Otherwise it is <see langword="false"/>.</returns>
        </member>
        <member name="P:NQuery.ShowPlanPropertyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NQuery.ShowPlanProperty"/> with the given <see cref="P:NQuery.ShowPlanProperty.FullName"/>.
            </summary>
            <param name="fullName">The <see cref="P:NQuery.ShowPlanProperty.FullName"/> of a <see cref="T:NQuery.ShowPlanProperty"/> to search for</param>
            <returns>The instance of the <see cref="T:NQuery.ShowPlanProperty"/> with the given <see cref="P:NQuery.ShowPlanProperty.FullName"/> or
            <see langword="null"/> if it is not conatained in this collection.
            </returns>
        </member>
        <member name="T:NQuery.Runtime.DataRowPropertyProvider">
            <summary>
            Provides properties for an instance of <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.DataRowPropertyProvider.GetProperties(System.Data.DataTable)">
            <summary>
            Returns the list of properties for the given instance.
            </summary>
            <remarks>
            The query engine does not cache the result.
            </remarks>
            <param name="dataTable">The data table to get the properties for.</param>
            <returns>A list of <see cref="T:NQuery.Runtime.PropertyBinding"/> for the given instance.</returns>
        </member>
        <member name="T:NQuery.Runtime.DictionaryPropertyProvider">
            <summary>
            Provides properties for an instance of <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.DictionaryPropertyProvider.GetProperties(System.Collections.IDictionary)">
            <summary>
            Returns the list of properties for the given instance.
            </summary>
            <remarks>
            The query engine does not cache the result.
            </remarks>
            <param name="dictionary">The instance to get the properties for.</param>
            <returns>A list of <see cref="T:NQuery.Runtime.PropertyBinding"/> for the given instance.</returns>
        </member>
        <member name="T:NQuery.Runtime.IMethodProvider">
            <summary>
            Interface to be implemented by clients that whish to contribute their own
            method provider on specific types.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.IMethodProvider.GetMethods(System.Type)">
            <summary>
            Returns the list of methods for the given type.
            </summary>
            <remarks>
            The query engine does not cache the result.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to get the methods for.</param>
            <returns>A list of <see cref="T:NQuery.Runtime.MethodBinding"/> for the given type.</returns>
        </member>
        <member name="T:NQuery.Runtime.IPropertyProvider">
            <summary>
            Interface to be implemented by clients that whish to contribute their own 
            property provider based on specific types.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.IPropertyProvider.GetProperties(System.Type)">
            <summary>
            Returns the list of properties for the given type.
            </summary>
            <remarks>
            The query engine does not cache the result.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to get the properties for.</param>
            <returns>A list of <see cref="T:NQuery.Runtime.PropertyBinding"/> for the given type.</returns>
        </member>
        <member name="T:NQuery.Runtime.ReflectionProvider">
            <summary>
            This class provides a basic property and method provider that uses reflection to provide definitions 
            for all fields, properties and methods of the given type. This class can be inherited to customize the 
            list of returned properties.
            </summary>
            <remarks>
            Note to inheritors: Override <see cref="M:NQuery.Runtime.ReflectionProvider.CreateProperty(System.Reflection.PropertyInfo)"/> or <see cref="M:NQuery.Runtime.ReflectionProvider.CreateProperty(System.Reflection.FieldInfo)"/>
            to customize the returned properties. To customize the returned methods override <see cref="M:NQuery.Runtime.ReflectionProvider.CreateMethod(System.Reflection.MethodInfo)"/>.
            </remarks>
        </member>
        <member name="M:NQuery.Runtime.ReflectionProvider.IsInvocable(System.Reflection.MethodInfo)">
            <summary>
            Checks whether the given <see cref="T:System.Reflection.MethodInfo"/> is invocable by the query engine, i.e. it can be used 
            as <see cref="T:NQuery.Runtime.InvocableBinding"/>.
            </summary>
            <remarks>
            A method cannot be invoked if any of the following is true:
            <ul>
            	<li><paramref name="methodInfo"/> has a special name (e.g. it is getter, setter, indexer or operator method)</li>
            	<li><paramref name="methodInfo"/> has abstract modifier</li>
            	<li><paramref name="methodInfo"/> has return type <see cref="T:System.Void"/></li>
            	<li><paramref name="methodInfo"/> has unsafe parameter types</li>
            	<li><paramref name="methodInfo"/> has dynamical argument lists (e.g. params modifier)</li>
            	<li><paramref name="methodInfo"/> has out or ref parameters</li>
            </ul>
            </remarks>
            <param name="methodInfo">The method info to check.</param>
        </member>
        <member name="M:NQuery.Runtime.ReflectionProvider.CreateMethod(System.Reflection.MethodInfo)">
            <summary>
            Creates a method binding for the given <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The .NET framework property info.</param>
            <returns>If the property should not be visible this method returns <see langword="null"/>.</returns>
        </member>
        <member name="M:NQuery.Runtime.ReflectionProvider.CreateProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a property binding for the given <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="propertyInfo">The .NET framework property info.</param>
            <returns>If the property should not be visible this method returns <see langword="null"/>.</returns>
        </member>
        <member name="M:NQuery.Runtime.ReflectionProvider.CreateProperty(System.Reflection.FieldInfo)">
            <summary>
            Creates a property binding for the given <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="fieldInfo">The .NET framework field info.</param>
            <returns>If the field should not be visible this method returns <see langword="null"/>.</returns>
        </member>
        <member name="T:NQuery.Runtime.DataColumnPropertyBinding">
            <summary>
            Represents a property that is bound to a particular <see cref="T:System.Data.DataColumn"/>. This class
            is used by <see cref="T:NQuery.Runtime.DataRowPropertyProvider"/> to represent the properties of an instance
            of <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="T:NQuery.Runtime.KeyPropertyBinding">
            <summary>
            Represents a property that is bound to a particular key. This class is used by 
            <see cref="T:NQuery.Runtime.DictionaryPropertyProvider"/> to represent the properties of an instance
            of <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="T:NQuery.Runtime.RowColumnBinding">
            <summary>
            This special class is used to represent a reference to a row itself.
            </summary>
        </member>
        <member name="T:NQuery.ICodeAssistanceContextProvider">
            <summary>
            Defines a mechanism for retrieving a context useful for code assistance; that are, objects that 
            provide member completion and parameter info.
            </summary>
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="M:NQuery.ICodeAssistanceContextProvider.ProvideMemberCompletionContext(NQuery.SourceLocation)">
            <summary>
            Provides a member completion context for a given location in source code i.e. a list of elements such as
            tables and keywords accessible.
            </summary>
            <param name="sourceLocation">The source code location where member completion is requested for.</param>
            <exception cref="T:NQuery.CompilationException">Thrown when the current context contained too many errors to provide member completion.</exception>
        </member>
        <member name="M:NQuery.ICodeAssistanceContextProvider.ProvideParameterInfoContext(NQuery.SourceLocation)">
            <summary>
            Provides parameter info context for a given location in source code i.e. a list of functions and parameters.
            </summary>
            <param name="sourceLocation">The source code location where parameter info is requested for.</param>
            <exception cref="T:NQuery.CompilationException">Thrown when the current context contained too many errors to provide parameter info.</exception>
        </member>
        <member name="T:NQuery.IParameterInfoContext">
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="M:NQuery.IParameterInfoContext.Enumerate(NQuery.IParameterInfoAcceptor)">
            <summary>
            Enumerates all methods, functions or aggregates that are invocable from the current context.
            </summary>
            <param name="acceptor">The acceptor to call for each method, function or aggregate in the current context.</param>
        </member>
        <member name="P:NQuery.IParameterInfoContext.SourceLocation">
            <summary>
            Gets the the source code location where this parameter info context has been requested for.
            </summary>
        </member>
        <member name="P:NQuery.IParameterInfoContext.ParameterIndex">
            <summary>
            Gets the parameter index of the invocation in the current context. If there is no invocation the
            return value is <c>-1</c>.
            </summary>
        </member>
        <member name="T:NQuery.IMemberCompletionContext">
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="M:NQuery.IMemberCompletionContext.Enumerate(NQuery.IMemberCompletionAcceptor)">
            <summary>
            Enumerates all members that are accessible form this context.
            </summary>
            <param name="acceptor">The acceptor to call for each accessible element in the current context.</param>
        </member>
        <member name="P:NQuery.IMemberCompletionContext.SourceLocation">
            <summary>
            Gets the the source code location where this member completion context has been requested for.
            </summary>
        </member>
        <member name="P:NQuery.IMemberCompletionContext.RemainingPart">
            <summary>
            Gets the identifier that has been written directly after the dot. If there was no dot or the
            member completion has been requested directly after the dot the return value is <see langword="null"/>.
            </summary>
        </member>
        <member name="T:NQuery.IMemberCompletionAcceptor">
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="T:NQuery.IParameterInfoAcceptor">
            <remarks>
            For a conceptual overview of code assistance see <a href="/Overview/CodeAssistance.html">Code Assistance</a>.
            </remarks>
        </member>
        <member name="T:NQuery.Compilation.NullRejectionChecker">
            <summary>
            This visitor checks whether a given expression will always yield null or false if
            all columns of the given <see cref="T:NQuery.Runtime.TableRefBinding"/> are null.
            </summary>
        </member>
        <member name="T:NQuery.Runtime.Soundex">
            <summary>
            Utility class for performing soundex algorithm.
            
            The Soundex algorithm is used to convert a word to a
            code based upon the phonetic sound of the word.
            
            The soundex algorithm is outlined below:
                Rule 1. Keep the first character of the name.
                Rule 2. Perform a transformation on each remaining characters:
                            A,E,I,O,U,Y     = A
                            H,W             = S
                            B,F,P,V         = 1
                            C,G,J,K,Q,S,X,Z = 2
                            D,T             = 3
                            L               = 4
                            M,N             = 5
                            R               = 6
                Rule 3. If a character is the same as the previous, do not include in the code.
                Rule 4. If character is "A" or "S" do not include in the code.
                Rule 5. If a character is blank, then do not include in the code.
                Rule 6. A soundex code must be exactly 4 characters long.  If the
                        code is too short then pad with zeros, otherwise truncate.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.Soundex.GetCode(System.String)">
            <summary>
            Return the soundex code for a given string.
            </summary>
        </member>
        <member name="M:NQuery.Runtime.Soundex.Transform(System.Char)">
            <summary>
            Transform the A-Z alphabetic characters to the appropriate soundex code.
            </summary>
        </member>
    </members>
</doc>
