@{
    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };
}
namespace @(Model.RootNamespace).@(Model.Module)
{
    using System;
    using System.Runtime.CompilerServices;

    [Imported, Serializable, PreserveMemberCase]
    public sealed class @Model.RowClassName
    {
@foreach (var x in Model.Fields) {
<text>        public @x.Type@(x.IsValueType ? "?" : "") @x.Ident { get; set; }
</text>}
@foreach (var x in Model.Joins){foreach (var y in x.Fields){
<text>        public @y.Type@(y.IsValueType ? "?" : "") @(jf(x.Name, y.Ident)) { get; set; }
</text>}}
    }
}