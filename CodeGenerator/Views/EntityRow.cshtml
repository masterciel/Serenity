@{
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");
     
    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };
}
namespace @(Model.RootNamespace)@(dotModule).Entities
{
    using Newtonsoft.Json;
    using Serenity;
    using Serenity.Data;
    using Serenity.Data.Mapping;
    using System;
    using System.ComponentModel;

    [Schema("@Model.Schema"), DisplayName("@Model.Tablename"), InstanceName("@Model.Tablename")]
    [ReadPermission("@Model.Permission")]
    [ModifyPermission("@Model.Permission")]
    [JsonConverter(typeof(JsonRowConverter))]
    public sealed class @Model.RowClassName : @Model.RowBaseClass, IIdRow@(Model.IsLookup ? ", IDbLookupRow" : "")@(Model.NameField == null ? "" : ", INameRow")
    {@foreach (var x in Model.Fields) {
    var attrs = new List<string>();
    if (x.Ident != x.Name) {
        attrs.Add("Column(\"" + x.Name + "\")");
    }

    attrs.Add("DisplayName(\"" + x.Ident + "\")");

    if ((x.Size ?? 0) != 0) {
        attrs.Add("Size(" + x.Size + ")");
    }
    if (x.Scale != 0) {
        attrs.Add("Scale(" + x.Scale + ")");
    }
    if (!String.IsNullOrEmpty(x.Flags)) {
        attrs.Add(x.Flags);
    }       
    if (!String.IsNullOrEmpty(x.ForeignTable)) {
        attrs.Add("ForeignKey(\"" + x.ForeignTable + "\", \"" + x.ForeignField + "\")");
        attrs.Add("AddJoin(\"j" + x.ForeignJoinAlias + "\")");
    }
    var attrString = String.Join(", ", attrs.ToArray());
<text>
@if (!String.IsNullOrEmpty(attrString)) {
<text>        [@Raw(attrString)]
</text>}        public @x.Type@(x.IsValueType ? "?" : "") @x.Ident
        {
            get { return Fields.@(x.Ident)[this]; }
            set { Fields.@(x.Ident)[this] = value; }
        }
</text>}
@foreach (var x in Model.Joins){foreach (var y in x.Fields){
<text>
        [DisplayName("@Raw(y.Ident)"), Expression("@Raw("j" + x.Name + "." + y.Name)")]
        public @y.Type@(y.IsValueType ? "?" : "") @(jf(x.Name, y.Ident))
        {
            get { return Fields.@(jf(x.Name, y.Ident))[this]; }
            set { Fields.@(jf(x.Name, y.Ident))[this] = value; }
        }
</text>}}

        IIdField IIdRow.IdField
        {
            get { return Fields.@(Model.Identity); }
        }
@if (Model.NameField != null) {
<text>
        StringField INameRow.NameField
        {
            get { return Fields.@Model.NameField; }
        }
</text>}

        public static readonly RowFields Fields = new RowFields().Init();

        public @(Model.RowClassName)()
            : base(Fields)
        {
        }

        public class RowFields : @(Model.FieldsBaseClass)
        {@foreach (var x in Model.Fields) {
<text>
            public readonly @(x.Type)Field @(x.Ident);</text>}
@foreach (var x in Model.Joins) {
<text>
@foreach (var y in x.Fields) {
<text>
            public readonly @(y.Type)Field @(jf(x.Name, y.Ident));</text>}</text>
}

            public RowFields()
                : base("@Model.Tablename"@(string.IsNullOrEmpty(Model.FieldPrefix) ? "" : (", \"" + Model.FieldPrefix + "\"")))
            {
                LocalTextPrefix = "@(moduleDot)@(Model.ClassName)";
            }
        }
    }
}