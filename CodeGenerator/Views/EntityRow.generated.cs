#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Serenity.CodeGenerator.Views
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class EntityRow : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden

        #line 2 "..\..\Views\EntityRow.cshtml"
 public dynamic Model { get; set; } 
        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");



            
            #line 2 "..\..\Views\EntityRow.cshtml"
                                                   
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");
     
    Func<string, string, string> jf = (x, y) =>
    {
        if (x.ToLowerInvariant() == y.ToLowerInvariant())
            return y;
        else
            return x + y;
    };


            
            #line default
            #line hidden
WriteLiteral("namespace ");


            
            #line 14 "..\..\Views\EntityRow.cshtml"
      Write(Model.RootNamespace);

            
            #line default
            #line hidden

            
            #line 14 "..\..\Views\EntityRow.cshtml"
                            Write(dotModule);

            
            #line default
            #line hidden
WriteLiteral(".Entities\r\n{\r\n    using Newtonsoft.Json;\r\n    using Serenity;\r\n    using Serenity" +
".Data;\r\n    using Serenity.Data.Mapping;\r\n    using System;\r\n    using System.Co" +
"mponentModel;\r\n\r\n    [ConnectionKey(\"");


            
            #line 23 "..\..\Views\EntityRow.cshtml"
               Write(Model.Schema);

            
            #line default
            #line hidden
WriteLiteral("\"), DisplayName(\"");


            
            #line 23 "..\..\Views\EntityRow.cshtml"
                                             Write(Model.Tablename);

            
            #line default
            #line hidden
WriteLiteral("\"), InstanceName(\"");


            
            #line 23 "..\..\Views\EntityRow.cshtml"
                                                                               Write(Model.Tablename);

            
            #line default
            #line hidden
WriteLiteral("\")]\r\n    [ReadPermission(\"");


            
            #line 24 "..\..\Views\EntityRow.cshtml"
                Write(Model.Permission);

            
            #line default
            #line hidden
WriteLiteral("\")]\r\n    [ModifyPermission(\"");


            
            #line 25 "..\..\Views\EntityRow.cshtml"
                  Write(Model.Permission);

            
            #line default
            #line hidden
WriteLiteral("\")]\r\n    [JsonConverter(typeof(JsonRowConverter))]\r\n    public sealed class ");


            
            #line 27 "..\..\Views\EntityRow.cshtml"
                   Write(Model.RowClassName);

            
            #line default
            #line hidden
WriteLiteral(" : ");


            
            #line 27 "..\..\Views\EntityRow.cshtml"
                                         Write(Model.RowBaseClass);

            
            #line default
            #line hidden
WriteLiteral(", IIdRow");


            
            #line 27 "..\..\Views\EntityRow.cshtml"
                                                                     Write(Model.IsLookup ? ", IDbLookupRow" : "");

            
            #line default
            #line hidden

            
            #line 27 "..\..\Views\EntityRow.cshtml"
                                                                                                              Write(Model.NameField == null ? "" : ", INameRow");

            
            #line default
            #line hidden

            
            #line 27 "..\..\Views\EntityRow.cshtml"
                                                                                                                                                                WriteLiteral("\r\n    {");

            
            #line default
            #line hidden
            
            #line 28 "..\..\Views\EntityRow.cshtml"
      foreach (var x in Model.Fields) {
    var attrs = new List<string>();
    if (x.Ident != x.Name) {
        attrs.Add("Column(\"" + x.Name + "\")");
    }

    attrs.Add("DisplayName(\"" + x.Title + "\")");

    if ((x.Size ?? 0) != 0) {
        attrs.Add("Size(" + x.Size + ")");
    }
    if (x.Scale != 0) {
        attrs.Add("Scale(" + x.Scale + ")");
    }
    if (!String.IsNullOrEmpty(x.Flags)) {
        attrs.Add(x.Flags);
    }       
    if (!String.IsNullOrEmpty(x.ForeignTable)) {
        attrs.Add("ForeignKey(\"" + x.ForeignTable + "\", \"" + x.ForeignField + "\")");
        attrs.Add("LeftJoin(\"j" + x.ForeignJoinAlias + "\")");
    }
    if (Model.NameField == x.Ident) {
        attrs.Add("QuickSearch");
    }
    var attrString = String.Join(", ", attrs.ToArray());

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 54 "..\..\Views\EntityRow.cshtml"
 if (!String.IsNullOrEmpty(attrString)) {

            
            #line default
            #line hidden
WriteLiteral("        [");


            
            #line 55 "..\..\Views\EntityRow.cshtml"
          Write(attrString);

            
            #line default
            #line hidden
WriteLiteral("]\r\n");


            
            #line 56 "..\..\Views\EntityRow.cshtml"
       }
            
            #line default
            #line hidden
WriteLiteral("        public ");


            
            #line 56 "..\..\Views\EntityRow.cshtml"
                  Write(x.Type);

            
            #line default
            #line hidden

            
            #line 56 "..\..\Views\EntityRow.cshtml"
                          Write(x.IsValueType ? "?" : "");

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 56 "..\..\Views\EntityRow.cshtml"
                                                     Write(x.Ident);

            
            #line default
            #line hidden
WriteLiteral("\r\n        {\r\n            get { return Fields.");


            
            #line 58 "..\..\Views\EntityRow.cshtml"
                            Write(x.Ident);

            
            #line default
            #line hidden
WriteLiteral("[this]; }\r\n            set { Fields.");


            
            #line 59 "..\..\Views\EntityRow.cshtml"
                     Write(x.Ident);

            
            #line default
            #line hidden
WriteLiteral("[this] = value; }\r\n        }\r\n");


            
            #line 61 "..\..\Views\EntityRow.cshtml"
       }

            
            #line default
            #line hidden

            
            #line 62 "..\..\Views\EntityRow.cshtml"
 foreach (var x in Model.Joins){foreach (var y in x.Fields){

            
            #line default
            #line hidden
WriteLiteral("\r\n        [DisplayName(\"");


            
            #line 64 "..\..\Views\EntityRow.cshtml"
                 Write(y.Title);

            
            #line default
            #line hidden
WriteLiteral("\"), Expression(\"");


            
            #line 64 "..\..\Views\EntityRow.cshtml"
                                          Write("j" + x.Name + "." + y.Name);

            
            #line default
            #line hidden
WriteLiteral("\")]\r\n        public ");


            
            #line 65 "..\..\Views\EntityRow.cshtml"
          Write(y.Type);

            
            #line default
            #line hidden

            
            #line 65 "..\..\Views\EntityRow.cshtml"
                  Write(y.IsValueType ? "?" : "");

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 65 "..\..\Views\EntityRow.cshtml"
                                              Write(jf(x.Name, y.Ident));

            
            #line default
            #line hidden
WriteLiteral("\r\n        {\r\n            get { return Fields.");


            
            #line 67 "..\..\Views\EntityRow.cshtml"
                            Write(jf(x.Name, y.Ident));

            
            #line default
            #line hidden
WriteLiteral("[this]; }\r\n            set { Fields.");


            
            #line 68 "..\..\Views\EntityRow.cshtml"
                     Write(jf(x.Name, y.Ident));

            
            #line default
            #line hidden
WriteLiteral("[this] = value; }\r\n        }\r\n");


            
            #line 70 "..\..\Views\EntityRow.cshtml"
       }}

            
            #line default
            #line hidden
WriteLiteral("\r\n        IIdField IIdRow.IdField\r\n        {\r\n            get { return Fields.");


            
            #line 74 "..\..\Views\EntityRow.cshtml"
                            Write(Model.Identity);

            
            #line default
            #line hidden
WriteLiteral("; }\r\n        }\r\n");


            
            #line 76 "..\..\Views\EntityRow.cshtml"
 if (Model.NameField != null) {

            
            #line default
            #line hidden
WriteLiteral("\r\n        StringField INameRow.NameField\r\n        {\r\n            get { return Fie" +
"lds.");


            
            #line 80 "..\..\Views\EntityRow.cshtml"
                           Write(Model.NameField);

            
            #line default
            #line hidden
WriteLiteral("; }\r\n        }\r\n");


            
            #line 82 "..\..\Views\EntityRow.cshtml"
       }

            
            #line default
            #line hidden
WriteLiteral("\r\n        public static readonly RowFields Fields = new RowFields().Init();\r\n\r\n  " +
"      public ");


            
            #line 86 "..\..\Views\EntityRow.cshtml"
           Write(Model.RowClassName);

            
            #line default
            #line hidden
WriteLiteral("()\r\n            : base(Fields)\r\n        {\r\n        }\r\n\r\n        public class RowF" +
"ields : ");


            
            #line 91 "..\..\Views\EntityRow.cshtml"
                             Write(Model.FieldsBaseClass);

            
            #line default
            #line hidden

            
            #line 91 "..\..\Views\EntityRow.cshtml"
                                                         WriteLiteral("\r\n        {");

            
            #line default
            #line hidden
            
            #line 92 "..\..\Views\EntityRow.cshtml"
          foreach (var x in Model.Fields) {

            
            #line default
            #line hidden
WriteLiteral("\r\n            public readonly ");


            
            #line 94 "..\..\Views\EntityRow.cshtml"
                        Write(x.Type);

            
            #line default
            #line hidden
WriteLiteral("Field ");


            
            #line 94 "..\..\Views\EntityRow.cshtml"
                                       Write(x.Ident);

            
            #line default
            #line hidden
WriteLiteral(";");


            
            #line 94 "..\..\Views\EntityRow.cshtml"
                                                             }

            
            #line default
            #line hidden

            
            #line 95 "..\..\Views\EntityRow.cshtml"
 foreach (var x in Model.Joins) {

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 97 "..\..\Views\EntityRow.cshtml"
 foreach (var y in x.Fields) {

            
            #line default
            #line hidden
WriteLiteral("\r\n            public readonly ");


            
            #line 99 "..\..\Views\EntityRow.cshtml"
                        Write(y.Type);

            
            #line default
            #line hidden
WriteLiteral("Field ");


            
            #line 99 "..\..\Views\EntityRow.cshtml"
                                       Write(jf(x.Name, y.Ident));

            
            #line default
            #line hidden
WriteLiteral(";");


            
            #line 99 "..\..\Views\EntityRow.cshtml"
                                                                         }
            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 100 "..\..\Views\EntityRow.cshtml"
}

            
            #line default
            #line hidden
WriteLiteral("\r\n            public RowFields()\r\n                : base(\"");


            
            #line 103 "..\..\Views\EntityRow.cshtml"
                   Write(Model.Tablename);

            
            #line default
            #line hidden
WriteLiteral("\"");


            
            #line 103 "..\..\Views\EntityRow.cshtml"
                                     Write(string.IsNullOrEmpty(Model.FieldPrefix) ? "" : (", \"" + Model.FieldPrefix + "\""));

            
            #line default
            #line hidden
WriteLiteral(")\r\n            {\r\n                LocalTextPrefix = \"");


            
            #line 105 "..\..\Views\EntityRow.cshtml"
                               Write(moduleDot);

            
            #line default
            #line hidden

            
            #line 105 "..\..\Views\EntityRow.cshtml"
                                           Write(Model.ClassName);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n            }\r\n        }\r\n    }\r\n}");


        }
    }
}
#pragma warning restore 1591
