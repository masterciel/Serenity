import type { Column } from "./column";
import type { EditorLock } from "./editing";
import type { EditCommand, EditorFactory } from "./editor";
import type { ColumnFormatter, FormatterFactory } from "./formatting";

export interface GridOptions<TItem = any> {
    addNewRowCssClass?: string;
    alwaysAllowHorizontalScroll?: boolean;
    alwaysShowVerticalScroll?: boolean;
    asyncEditorLoadDelay?: number;
    asyncEditorLoading?: boolean;
    asyncPostCleanupDelay?: number;
    asyncPostRenderDelay?: number;
    autoEdit?: boolean;
    autoHeight?: boolean;
    cellFlashingCssClass?: string;
    cellHighlightCssClass?: string;
    columns?: Column<TItem>[];
    dataItemColumnValueExtractor?: (item: TItem, column: Column<TItem>) => void;
    defaultColumnWidth?: number;
    defaultFormatter?: ColumnFormatter<TItem>;
    editable?: boolean;
    editCommandHandler?: (item: TItem, column: Column<TItem>, command: EditCommand) => void;
    editorFactory?: EditorFactory;
    editorLock?: EditorLock;
    enableAddRow?: boolean;
    enableAsyncPostRender?: boolean;
    enableAsyncPostRenderCleanup?: boolean;
    enableCellNavigation?: boolean;
    enableCellRangeSelection?: boolean;
    enableColumnReorder?: boolean;
    enableRowReordering?: boolean;
    enableTabKeyNavigation?: boolean;
    enableTextSelectionOnCells?: boolean;
    explicitInitialization?: boolean;
    footerRowHeight?: number;
    forceFitColumns?: boolean;
    forceSyncScrolling?: boolean;
    formatterFactory?: FormatterFactory;
    frozenBottom?: boolean;
    frozenColumn?: number;
    frozenRow?: number;
    fullWidthRows?: boolean;
    groupingPanel?: boolean,
    groupingPanelHeight?: number;
    headerRowHeight?: number;
    leaveSpaceForNewRows?: boolean;
    minBuffer?: number;
    multiColumnSort?: boolean;
    multiSelect?: boolean;
    renderAllCells?: boolean;
    rowHeight?: number;
    selectedCellCssClass?: string;
    showCellSelection?: boolean;
    showColumnHeader?: boolean;
    showFooterRow?: boolean;
    showGroupingPanel?: boolean;
    showHeaderRow?: boolean;
    showTopPanel?: boolean;
    suppressActiveCellChangeOnEdit?: boolean;
    syncColumnCellResize?: boolean;
    topPanelHeight?: number;
    useLegacyUI?: boolean;
    viewportClass?: string;
}