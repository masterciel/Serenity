using Serenity.Web;

namespace Serenity.ComponentModel;

/// <summary>
/// Options of the uploaded image.
/// </summary>
public interface IUploadImageOptions
{
    /// <summary>
    /// Maximum height in pixels of the uploaded image.
    /// </summary>
    public int MaxHeight { get; }

    /// <summary>
    /// Maximum width in pixels of the uploaded image.
    /// </summary>
    public int MaxWidth { get; }

    /// <summary>
    /// Minimum height in pixels of the uploaded image.
    /// </summary>
    public int MinHeight { get; }

    /// <summary>
    /// Minimum width in pixels of the uploaded image.
    /// </summary>
    public int MinWidth { get; }

    /// <summary>
    /// Quality of scaled image (not thumb).
    /// </summary>
    int ScaleQuality { get; }

    /// <summary>
    /// What width image should be scaled to. Default value of 0 disables it.
    /// </summary>
    public int ScaleWidth { get; }

    /// <summary>
    /// What height image should be scaled to. Default value of 0 disables it.
    /// </summary>
    public int ScaleHeight { get; }

    /// <summary>
    /// Should image be scaled up to requested size when its smaller
    /// </summary>
    public bool ScaleSmaller { get; }

    /// <summary>
    /// What kind of image scaling should be used to generate image.
    /// </summary>
    public ImageScaleMode ScaleMode { get; }
    
    /// <summary>
    /// Background color to use when padding image
    /// </summary>
    public string ScaleBackColor { get; set; }

    /// <summary>
    /// List of thumbnail sizes requested. Something like
    /// "96x96;128x128;200x200"
    /// </summary>
    public string ThumbSizes { get; }

    /// <summary>
    /// What kind of image scaling should be used to generate thumbnails.
    /// </summary>
    public ImageScaleMode ThumbMode { get; }

    /// <summary>
    /// Quality of thumbnails.
    /// </summary>
    public int ThumbQuality { get; }
    
    /// <summary>
    /// Background color to use when padding thumbnails
    /// </summary>
    public string ThumbBackColor { get; set; }

    /// <summary>
    /// If you want to store original name of the file uploaded,
    /// set this to the name of another string field. Only used
    /// for single image uploads.
    /// </summary>
    public string OriginalNameProperty { get; }

    /// <summary>
    /// If you have no original name property but use original
    /// name in file name with {4} format parameter, set this
    /// to true to force ImageUploadEditor show file name.
    /// </summary>
    public bool DisplayFileName { get; }

    /// <summary>
    /// Should a copy of file placed in a special history folder on upload. 
    /// This helps preserving old files on update.
    /// </summary>
    public bool CopyToHistory { get; }

    /// <summary>
    /// Format of the file name like "ProductImage/{1:00000}/{0:00000000}_{2}".
    /// Parameter 0 is the row identity value, 1 is identity value / 1000, 
    /// and 2 is a random string like 2cxs4bc, 3 is current date/time,
    /// 4 is original file name.
    /// You can also use the shortcut "ProductImage/~" which is equivalent 
    /// to the prior sample.
    /// If you don't specify this, it will default to something like
    /// Product/ProductImage/~ which is generated by combining row class name
    /// and field name.
    /// </summary>
    public string FilenameFormat { get; }

    /// <summary>
    /// If you don't want ImageUploadBehavior to process this upload, 
    /// and want to handle it manually, set to true (not recommended)
    /// </summary>
    public bool DisableDefaultBehavior { get; }

    /// <summary>
    /// Only useful for uploading multiple files. Specifies
    /// whether to JSON encode value. If your field is a string
    /// field set it to true.
    /// </summary>
    public bool JsonEncodeValue { get; }
}